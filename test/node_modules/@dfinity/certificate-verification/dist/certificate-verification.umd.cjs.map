{"version":3,"file":"certificate-verification.umd.cjs","sources":["../src/error.ts","../src/index.ts"],"sourcesContent":["export class CertificateVerificationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n  }\n}\n\nexport class CertificateTimeError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n  }\n}\n","import {\n  Cbor,\n  Certificate,\n  HashTree,\n  reconstruct,\n  compare,\n} from '@dfinity/agent';\nimport { Principal } from '@dfinity/principal';\nimport { PipeArrayBuffer, lebDecode } from '@dfinity/candid';\nimport { CertificateTimeError, CertificateVerificationError } from './error';\n\nexport interface VerifyCertificationParams {\n  canisterId: Principal;\n  encodedCertificate: ArrayBuffer;\n  encodedTree: ArrayBuffer;\n  rootKey: ArrayBuffer;\n  maxCertificateTimeOffsetMs: number;\n}\n\nexport async function verifyCertification({\n  canisterId,\n  encodedCertificate,\n  encodedTree,\n  rootKey,\n  maxCertificateTimeOffsetMs,\n}: VerifyCertificationParams): Promise<HashTree> {\n  const nowMs = Date.now();\n  const certificate = await Certificate.create({\n    certificate: encodedCertificate,\n    canisterId,\n    rootKey,\n  });\n  const tree = Cbor.decode<HashTree>(encodedTree);\n\n  validateCertificateTime(certificate, maxCertificateTimeOffsetMs, nowMs);\n  await validateTree(tree, certificate, canisterId);\n\n  return tree;\n}\n\nfunction validateCertificateTime(\n  certificate: Certificate,\n  maxCertificateTimeOffsetMs: number,\n  nowMs: number,\n): void {\n  const certificateTimeNs = lebDecode(\n    new PipeArrayBuffer(certificate.lookup(['time'])),\n  );\n  const certificateTimeMs = Number(certificateTimeNs / BigInt(1_000_000));\n\n  if (certificateTimeMs - maxCertificateTimeOffsetMs > nowMs) {\n    throw new CertificateTimeError(\n      `Invalid certificate: time ${certificateTimeMs} is too far in the future (current time: ${nowMs})`,\n    );\n  }\n\n  if (certificateTimeMs + maxCertificateTimeOffsetMs < nowMs) {\n    throw new CertificateTimeError(\n      `Invalid certificate: time ${certificateTimeMs} is too far in the past (current time: ${nowMs})`,\n    );\n  }\n}\n\nasync function validateTree(\n  tree: HashTree,\n  certificate: Certificate,\n  canisterId: Principal,\n): Promise<void> {\n  const treeRootHash = await reconstruct(tree);\n  const certifiedData = certificate.lookup([\n    'canister',\n    canisterId.toUint8Array(),\n    'certified_data',\n  ]);\n\n  if (!certifiedData) {\n    throw new CertificateVerificationError(\n      'Could not find certified data in the certificate.',\n    );\n  }\n\n  if (!equal(certifiedData, treeRootHash)) {\n    throw new CertificateVerificationError(\n      'Tree root hash did not match the certified data in the certificate.',\n    );\n  }\n}\n\nfunction equal(a: ArrayBuffer, b: ArrayBuffer): boolean {\n  return compare(a, b) === 0;\n}\n"],"names":["CertificateVerificationError","message","CertificateTimeError","verifyCertification","canisterId","encodedCertificate","encodedTree","rootKey","maxCertificateTimeOffsetMs","nowMs","certificate","Certificate","tree","Cbor","validateCertificateTime","validateTree","certificateTimeNs","lebDecode","PipeArrayBuffer","certificateTimeMs","treeRootHash","reconstruct","certifiedData","equal","a","b","compare"],"mappings":"+XAAO,MAAMA,UAAqC,KAAM,CACtD,YAAYC,EAAiB,CAC3B,MAAMA,CAAO,EACR,KAAA,KAAO,KAAK,YAAY,IAC/B,CACF,CAEO,MAAMC,UAA6B,KAAM,CAC9C,YAAYD,EAAiB,CAC3B,MAAMA,CAAO,EACR,KAAA,KAAO,KAAK,YAAY,IAC/B,CACF,CCOA,eAAsBE,EAAoB,CACxC,WAAAC,EACA,mBAAAC,EACA,YAAAC,EACA,QAAAC,EACA,2BAAAC,CACF,EAAiD,CACzC,MAAAC,EAAQ,KAAK,MACbC,EAAc,MAAMC,EAAA,YAAY,OAAO,CAC3C,YAAaN,EACb,WAAAD,EACA,QAAAG,CAAA,CACD,EACKK,EAAOC,EAAAA,KAAK,OAAiBP,CAAW,EAEtB,OAAAQ,EAAAJ,EAAaF,EAA4BC,CAAK,EAChE,MAAAM,EAAaH,EAAMF,EAAaN,CAAU,EAEzCQ,CACT,CAEA,SAASE,EACPJ,EACAF,EACAC,EACM,CACN,MAAMO,EAAoBC,EAAA,UACxB,IAAIC,EAAgB,gBAAAR,EAAY,OAAO,CAAC,MAAM,CAAC,CAAC,CAAA,EAE5CS,EAAoB,OAAOH,EAAoB,OAAO,GAAS,CAAC,EAElE,GAAAG,EAAoBX,EAA6BC,EACnD,MAAM,IAAIP,EACR,6BAA6BiB,CAAiB,4CAA4CV,CAAK,GAAA,EAI/F,GAAAU,EAAoBX,EAA6BC,EACnD,MAAM,IAAIP,EACR,6BAA6BiB,CAAiB,0CAA0CV,CAAK,GAAA,CAGnG,CAEA,eAAeM,EACbH,EACAF,EACAN,EACe,CACT,MAAAgB,EAAe,MAAMC,cAAYT,CAAI,EACrCU,EAAgBZ,EAAY,OAAO,CACvC,WACAN,EAAW,aAAa,EACxB,gBAAA,CACD,EAED,GAAI,CAACkB,EACH,MAAM,IAAItB,EACR,mDAAA,EAIJ,GAAI,CAACuB,EAAMD,EAAeF,CAAY,EACpC,MAAM,IAAIpB,EACR,qEAAA,CAGN,CAEA,SAASuB,EAAMC,EAAgBC,EAAyB,CAC/C,OAAAC,UAAQF,EAAGC,CAAC,IAAM,CAC3B"}