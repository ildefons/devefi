{"version":3,"file":"certificate-verification.js","sources":["../src/error.ts","../src/index.ts"],"sourcesContent":["export class CertificateVerificationError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n  }\n}\n\nexport class CertificateTimeError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = this.constructor.name;\n  }\n}\n","import {\n  Cbor,\n  Certificate,\n  HashTree,\n  reconstruct,\n  compare,\n} from '@dfinity/agent';\nimport { Principal } from '@dfinity/principal';\nimport { PipeArrayBuffer, lebDecode } from '@dfinity/candid';\nimport { CertificateTimeError, CertificateVerificationError } from './error';\n\nexport interface VerifyCertificationParams {\n  canisterId: Principal;\n  encodedCertificate: ArrayBuffer;\n  encodedTree: ArrayBuffer;\n  rootKey: ArrayBuffer;\n  maxCertificateTimeOffsetMs: number;\n}\n\nexport async function verifyCertification({\n  canisterId,\n  encodedCertificate,\n  encodedTree,\n  rootKey,\n  maxCertificateTimeOffsetMs,\n}: VerifyCertificationParams): Promise<HashTree> {\n  const nowMs = Date.now();\n  const certificate = await Certificate.create({\n    certificate: encodedCertificate,\n    canisterId,\n    rootKey,\n  });\n  const tree = Cbor.decode<HashTree>(encodedTree);\n\n  validateCertificateTime(certificate, maxCertificateTimeOffsetMs, nowMs);\n  await validateTree(tree, certificate, canisterId);\n\n  return tree;\n}\n\nfunction validateCertificateTime(\n  certificate: Certificate,\n  maxCertificateTimeOffsetMs: number,\n  nowMs: number,\n): void {\n  const certificateTimeNs = lebDecode(\n    new PipeArrayBuffer(certificate.lookup(['time'])),\n  );\n  const certificateTimeMs = Number(certificateTimeNs / BigInt(1_000_000));\n\n  if (certificateTimeMs - maxCertificateTimeOffsetMs > nowMs) {\n    throw new CertificateTimeError(\n      `Invalid certificate: time ${certificateTimeMs} is too far in the future (current time: ${nowMs})`,\n    );\n  }\n\n  if (certificateTimeMs + maxCertificateTimeOffsetMs < nowMs) {\n    throw new CertificateTimeError(\n      `Invalid certificate: time ${certificateTimeMs} is too far in the past (current time: ${nowMs})`,\n    );\n  }\n}\n\nasync function validateTree(\n  tree: HashTree,\n  certificate: Certificate,\n  canisterId: Principal,\n): Promise<void> {\n  const treeRootHash = await reconstruct(tree);\n  const certifiedData = certificate.lookup([\n    'canister',\n    canisterId.toUint8Array(),\n    'certified_data',\n  ]);\n\n  if (!certifiedData) {\n    throw new CertificateVerificationError(\n      'Could not find certified data in the certificate.',\n    );\n  }\n\n  if (!equal(certifiedData, treeRootHash)) {\n    throw new CertificateVerificationError(\n      'Tree root hash did not match the certified data in the certificate.',\n    );\n  }\n}\n\nfunction equal(a: ArrayBuffer, b: ArrayBuffer): boolean {\n  return compare(a, b) === 0;\n}\n"],"names":["CertificateVerificationError","message","CertificateTimeError","verifyCertification","canisterId","encodedCertificate","encodedTree","rootKey","maxCertificateTimeOffsetMs","nowMs","certificate","Certificate","tree","Cbor","validateCertificateTime","validateTree","certificateTimeNs","lebDecode","PipeArrayBuffer","certificateTimeMs","treeRootHash","reconstruct","certifiedData","equal","a","b","compare"],"mappings":";;AAAO,MAAMA,UAAqC,MAAM;AAAA,EACtD,YAAYC,GAAiB;AAC3B,UAAMA,CAAO,GACR,KAAA,OAAO,KAAK,YAAY;AAAA,EAC/B;AACF;AAEO,MAAMC,UAA6B,MAAM;AAAA,EAC9C,YAAYD,GAAiB;AAC3B,UAAMA,CAAO,GACR,KAAA,OAAO,KAAK,YAAY;AAAA,EAC/B;AACF;ACOA,eAAsBE,EAAoB;AAAA,EACxC,YAAAC;AAAA,EACA,oBAAAC;AAAA,EACA,aAAAC;AAAA,EACA,SAAAC;AAAA,EACA,4BAAAC;AACF,GAAiD;AACzC,QAAAC,IAAQ,KAAK,OACbC,IAAc,MAAMC,EAAY,OAAO;AAAA,IAC3C,aAAaN;AAAA,IACb,YAAAD;AAAA,IACA,SAAAG;AAAA,EAAA,CACD,GACKK,IAAOC,EAAK,OAAiBP,CAAW;AAEtB,SAAAQ,EAAAJ,GAAaF,GAA4BC,CAAK,GAChE,MAAAM,EAAaH,GAAMF,GAAaN,CAAU,GAEzCQ;AACT;AAEA,SAASE,EACPJ,GACAF,GACAC,GACM;AACN,QAAMO,IAAoBC;AAAA,IACxB,IAAIC,EAAgBR,EAAY,OAAO,CAAC,MAAM,CAAC,CAAC;AAAA,EAAA,GAE5CS,IAAoB,OAAOH,IAAoB,OAAO,GAAS,CAAC;AAElE,MAAAG,IAAoBX,IAA6BC;AACnD,UAAM,IAAIP;AAAA,MACR,6BAA6BiB,CAAiB,4CAA4CV,CAAK;AAAA,IAAA;AAI/F,MAAAU,IAAoBX,IAA6BC;AACnD,UAAM,IAAIP;AAAA,MACR,6BAA6BiB,CAAiB,0CAA0CV,CAAK;AAAA,IAAA;AAGnG;AAEA,eAAeM,EACbH,GACAF,GACAN,GACe;AACT,QAAAgB,IAAe,MAAMC,EAAYT,CAAI,GACrCU,IAAgBZ,EAAY,OAAO;AAAA,IACvC;AAAA,IACAN,EAAW,aAAa;AAAA,IACxB;AAAA,EAAA,CACD;AAED,MAAI,CAACkB;AACH,UAAM,IAAItB;AAAA,MACR;AAAA,IAAA;AAIJ,MAAI,CAACuB,EAAMD,GAAeF,CAAY;AACpC,UAAM,IAAIpB;AAAA,MACR;AAAA,IAAA;AAGN;AAEA,SAASuB,EAAMC,GAAgBC,GAAyB;AAC/C,SAAAC,EAAQF,GAAGC,CAAC,MAAM;AAC3B;"}